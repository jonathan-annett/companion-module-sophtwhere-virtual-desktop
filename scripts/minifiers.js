/*!
 * companion-module-sophtwhere-timer/scripts/minifiers.js
 * Copyright(c) 2023 Jonathan Annett
 * MIT Licensed
 */
const fs = require('fs'),path=require('path');

const UglifyJS = require("uglify-js");
const htmlMinify = require('html-minifier');
const CleanCSS = require('clean-css');

const UglifyOptions = {
     output : { comments : '/(copyright|do not remove)/i' }
};

const HTMLMinifyoptions = {
    includeAutoGeneratedTags: true,
    removeAttributeQuotes: true,
    removeComments: false,
    removeRedundantAttributes: true,
    removeScriptTypeAttributes: true,
    removeStyleLinkTypeAttributes: true,
    sortClassName: true,
    useShortDoctype: true,
    collapseWhitespace: true
  };

const CSSMinifyOptions = {

};

const CSSMinifier = new CleanCSS(CSSMinifyOptions)


const js_regexp = /\.js$/;
const html_regexp = /\.html$/;
const css_regexp = /\.css$/;

// index of minifiers by file ext
const minifiers = {
    js : function (basename,contentBuf) {
        const content = contentBuf.toString('utf8').trim();
        const result = UglifyJS.minify(content, UglifyOptions);
        if (!result.error && result.code) {
            const extFix =  function(f){return f.replace(js_regexp,'.min.js');};
            return {
                content,
                contentMin : result.code,
                extFix,
                htmlFix : function (html) {
                    const replace     = `src="${basename}"`;
                    if (html.indexOf(replace)>=0) {
                        const replaceWith = `src="${extFix(basename)}"`;
                        //console.log(`replacing "${replace}" with "${replaceWith}"`)
                        while (html.indexOf(replace)>=0) {
                            html = html.replace(replace,replaceWith);
                        }
                    //} else {
                       // console.log(`"${replace}" not found`) 
                    }
                    return html;
                }
            }
        }
        return {
            content:contentBuf
        };
    },
    html : function (basename,contentBuf) {
        const content = contentBuf.toString('utf8').trim();
        const extFix =  function(f){return f.replace(html_regexp,'.min.html');};
        const contentMin =  htmlMinify.minify(content, HTMLMinifyoptions);  
        if (contentMin.trim() === content) {
            return {
                content:contentBuf
            };
        }
        return {
            content,contentMin,extFix
        };
    },
    css :  function (basename,contentBuf) {
        const content = contentBuf.toString('utf8').trim();
        const result =  CSSMinifier.minify(content);
        const contentMin = result && result.styles;
        if (!contentMin ||  contentMin.trim() === content) {
            return {
                content:contentBuf
            };
        }
        const extFix =  function(f){return f.replace(css_regexp,'.min.css');};
        return {
            content,
            contentMin,
            extFix,
            htmlFix : function (html) {
                const replace     = `href="${basename}"`;
                if (html.indexOf(replace)>=0) {
                    const replaceWith = `href="${extFix(basename)}"`;
                    while (html.indexOf(replace)>=0) {
                        html = html.replace(replace,replaceWith);
                    }
                }
                return html;
            }
        };
    },
}


module.exports = {minify,html_regexp,js_regexp,css_regexp};

function minify(pathToContent,contentBuf) {
    const parts =  pathToContent.split('.');
    const ext =  parts.pop();
    const isMin = parts.pop() === 'min';
    if (isMin) return null;
    const mini = minifiers [ ext ];
    if (!mini) return null;
    return mini(path.basename(pathToContent),contentBuf);
}
